import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.9K5fzrVi.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"fundamentals/basics/syntax_and_structure.md","filePath":"fundamentals/basics/syntax_and_structure.md"}'),e={name:"fundamentals/basics/syntax_and_structure.md"};function l(h,s,p,o,r,k){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h2 id="✅-2-javascript-syntax-and-structure" tabindex="-1">✅ 2. JavaScript Syntax and Structure <a class="header-anchor" href="#✅-2-javascript-syntax-and-structure" aria-label="Permalink to &quot;✅ 2. JavaScript Syntax and Structure&quot;">​</a></h2><p>Understanding JavaScript’s syntax is crucial for writing correct and readable code. In this section, we’ll cover the fundamental building blocks of JavaScript’s structure, including how statements are written, how comments work, and the role of whitespace.</p><hr><h3 id="🔡-case-sensitivity" tabindex="-1">🔡 <strong>Case Sensitivity</strong> <a class="header-anchor" href="#🔡-case-sensitivity" aria-label="Permalink to &quot;🔡 **Case Sensitivity**&quot;">​</a></h3><p>JavaScript is <strong>case-sensitive</strong>, which means:</p><ul><li><code>myVariable</code> and <code>myvariable</code> are <strong>different identifiers</strong></li><li>Keywords and object properties must be spelled with exact casing</li></ul><p>✅ <strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Alice</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bob</span></span></code></pre></div><p>🛑 <strong>Incorrect usage:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyName); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ReferenceError: MyName is not defined</span></span></code></pre></div><p>➡️ <strong>Tip:</strong> Stick to a consistent naming convention like <strong>camelCase</strong> for variables and functions (<code>userAge</code>, <code>getUserName()</code>).</p><hr><h3 id="🔚-statements-and-semicolons" tabindex="-1">🔚 <strong>Statements and Semicolons</strong> <a class="header-anchor" href="#🔚-statements-and-semicolons" aria-label="Permalink to &quot;🔚 **Statements and Semicolons**&quot;">​</a></h3><p>A <strong>statement</strong> is a single line of code that performs an action.</p><p>JavaScript automatically adds semicolons <strong>(automatic semicolon insertion - ASI)</strong>, but it’s <strong>good practice to add them manually</strong> for clarity and to avoid unexpected bugs.</p><p>✅ <strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age);</span></span></code></pre></div><p>Without semicolons, this can sometimes cause issues:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Works, but risky in complex code</span></span></code></pre></div><p>➡️ <strong>Best Practice:</strong> Always end your statements with a semicolon <code>;</code>.</p><hr><h3 id="💬-comments" tabindex="-1">💬 <strong>Comments</strong> <a class="header-anchor" href="#💬-comments" aria-label="Permalink to &quot;💬 **Comments**&quot;">​</a></h3><p>Comments help explain code to yourself and others. JavaScript ignores comments during execution.</p><h4 id="✅-single-line-comments" tabindex="-1">✅ Single-line comments <a class="header-anchor" href="#✅-single-line-comments" aria-label="Permalink to &quot;✅ Single-line comments&quot;">​</a></h4><p>Use <code>//</code> for short comments.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This is a single-line comment</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Declaring a variable</span></span></code></pre></div><h4 id="✅-multi-line-comments" tabindex="-1">✅ Multi-line comments <a class="header-anchor" href="#✅-multi-line-comments" aria-label="Permalink to &quot;✅ Multi-line comments&quot;">​</a></h4><p>Use <code>/* */</code> to span multiple lines.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  This is a multi-line comment.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  It can describe complex logic</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  or disable multiple lines temporarily.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>➡️ <strong>Tip:</strong> Comment your code as you learn—it helps reinforce what you&#39;re doing.</p><hr><h3 id="⬜-whitespace-and-indentation" tabindex="-1">⬜ <strong>Whitespace and Indentation</strong> <a class="header-anchor" href="#⬜-whitespace-and-indentation" aria-label="Permalink to &quot;⬜ **Whitespace and Indentation**&quot;">​</a></h3><p><strong>Whitespace</strong> refers to spaces, tabs, and line breaks. JavaScript ignores extra whitespace, but it&#39;s essential for <strong>readability</strong>.</p><p><strong>Indentation</strong> helps structure your code, especially in blocks like functions and conditionals.</p><p>✅ <strong>Example:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (name) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>🛑 Poorly formatted code:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name){console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name);}}</span></span></code></pre></div><p>➡️ <strong>Best Practices:</strong></p><ul><li>Use <strong>2 or 4 spaces</strong> for indentation (stick to one consistently)</li><li>Use line breaks between logical blocks of code</li><li>Use a code linter or formatter (like Prettier) to automate clean formatting</li></ul><hr><h3 id="📝-summary" tabindex="-1">📝 Summary <a class="header-anchor" href="#📝-summary" aria-label="Permalink to &quot;📝 Summary&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Concept</th><th>Description</th></tr></thead><tbody><tr><td><strong>Case sensitivity</strong></td><td><code>Name</code> and <code>name</code> are different</td></tr><tr><td><strong>Statements</strong></td><td>Each action (line of code) is a statement</td></tr><tr><td><strong>Semicolons</strong></td><td>Optional but recommended to end statements</td></tr><tr><td><strong>Comments</strong></td><td>Use <code>//</code> and <code>/* */</code> for documenting code</td></tr><tr><td><strong>Whitespace</strong></td><td>Doesn’t affect execution, but improves readability</td></tr></tbody></table><hr><h3 id="🔁-quick-practice" tabindex="-1">🔁 Quick Practice <a class="header-anchor" href="#🔁-quick-practice" aria-label="Permalink to &quot;🔁 Quick Practice&quot;">​</a></h3><p>✅ What will this print?</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;blue&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;red&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(color);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color);</span></span></code></pre></div><p>✍️ <strong>Your Turn</strong>: Write a small function that logs your name, and include both single-line and multi-line comments.</p>`,48)])])}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
