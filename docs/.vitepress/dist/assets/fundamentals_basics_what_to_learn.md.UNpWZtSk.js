import{_ as o,c as a,o as t,ag as i}from"./chunks/framework.9K5fzrVi.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"fundamentals/basics/what_to_learn.md","filePath":"fundamentals/basics/what_to_learn.md"}'),r={name:"fundamentals/basics/what_to_learn.md"};function n(c,e,l,s,d,h){return t(),a("div",null,[...e[0]||(e[0]=[i('<h2 id="🟡-introduction-to-javascript-basics" tabindex="-1">🟡 Introduction to JavaScript Basics <a class="header-anchor" href="#🟡-introduction-to-javascript-basics" aria-label="Permalink to &quot;🟡 Introduction to JavaScript Basics&quot;">​</a></h2><p>JavaScript is one of the core technologies of the web, alongside HTML and CSS. It is a versatile, high-level programming language that enables interactive web pages, dynamic content, and complex applications right in the browser. Whether you&#39;re building websites, mobile apps, or full-stack applications, JavaScript is an essential tool in your toolkit.</p><p>This section of the tutorial is designed for <strong>absolute beginners</strong>. We’ll break down JavaScript into simple, easy-to-understand concepts. You’ll learn not only the <strong>syntax</strong> but also the <strong>why</strong> behind each principle. By the end of the basics module, you’ll be able to write clean, functional JavaScript code and understand how it interacts with HTML and the browser.</p><hr><h2 id="🗺️-roadmap-javascript-basics" tabindex="-1">🗺️ Roadmap: JavaScript Basics <a class="header-anchor" href="#🗺️-roadmap-javascript-basics" aria-label="Permalink to &quot;🗺️ Roadmap: JavaScript Basics&quot;">​</a></h2><p>Here’s a step-by-step guide for the topics you should cover in the <strong>JavaScript Basics</strong> section:</p><h3 id="✅-1-introduction-to-javascript" tabindex="-1">✅ 1. <strong>Introduction to JavaScript</strong> <a class="header-anchor" href="#✅-1-introduction-to-javascript" aria-label="Permalink to &quot;✅ 1. **Introduction to JavaScript**&quot;">​</a></h3><ul><li>What is JavaScript?</li><li>Where is JavaScript used?</li><li>How JS fits in the HTML-CSS-JS trio</li><li>Embedding JavaScript: <code>&lt;script&gt;</code> tag (inline, internal, external)</li></ul><hr><h3 id="✅-2-javascript-syntax-and-structure" tabindex="-1">✅ 2. <strong>JavaScript Syntax and Structure</strong> <a class="header-anchor" href="#✅-2-javascript-syntax-and-structure" aria-label="Permalink to &quot;✅ 2. **JavaScript Syntax and Structure**&quot;">​</a></h3><ul><li>Case sensitivity</li><li>Statements and semicolons</li><li>Comments (single-line, multi-line)</li><li>Whitespace and indentation</li></ul><hr><h3 id="✅-3-variables-and-constants" tabindex="-1">✅ 3. <strong>Variables and Constants</strong> <a class="header-anchor" href="#✅-3-variables-and-constants" aria-label="Permalink to &quot;✅ 3. **Variables and Constants**&quot;">​</a></h3><ul><li><code>var</code>, <code>let</code>, and <code>const</code></li><li>Variable naming rules</li><li>Scope basics (block vs function scope)</li><li>Best practices for declaring variables</li></ul><hr><h3 id="✅-4-data-types" tabindex="-1">✅ 4. <strong>Data Types</strong> <a class="header-anchor" href="#✅-4-data-types" aria-label="Permalink to &quot;✅ 4. **Data Types**&quot;">​</a></h3><ul><li>Primitive types: <code>String</code>, <code>Number</code>, <code>Boolean</code>, <code>Null</code>, <code>Undefined</code>, <code>Symbol</code>, <code>BigInt</code></li><li>Reference types: Objects, Arrays, Functions</li><li>Type checking with <code>typeof</code></li></ul><hr><h3 id="✅-5-operators" tabindex="-1">✅ 5. <strong>Operators</strong> <a class="header-anchor" href="#✅-5-operators" aria-label="Permalink to &quot;✅ 5. **Operators**&quot;">​</a></h3><ul><li>Arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>**</code>)</li><li>Assignment operators (<code>=</code>, <code>+=</code>, <code>-=</code>, etc.)</li><li>Comparison operators (<code>==</code>, <code>===</code>, <code>!=</code>, <code>!==</code>, <code>&lt;</code>, <code>&gt;</code>, etc.)</li><li>Logical operators (<code>&amp;&amp;</code>, <code>||</code>, <code>!</code>)</li><li>Ternary operator</li></ul><hr><h3 id="✅-6-control-flow" tabindex="-1">✅ 6. <strong>Control Flow</strong> <a class="header-anchor" href="#✅-6-control-flow" aria-label="Permalink to &quot;✅ 6. **Control Flow**&quot;">​</a></h3><ul><li><code>if</code>, <code>else if</code>, <code>else</code></li><li><code>switch</code> statement</li><li>Truthy and falsy values</li></ul><hr><h3 id="✅-7-loops" tabindex="-1">✅ 7. <strong>Loops</strong> <a class="header-anchor" href="#✅-7-loops" aria-label="Permalink to &quot;✅ 7. **Loops**&quot;">​</a></h3><ul><li><code>for</code> loop</li><li><code>while</code> loop</li><li><code>do...while</code> loop</li><li>Loop control: <code>break</code> and <code>continue</code></li></ul><hr><h3 id="✅-8-functions" tabindex="-1">✅ 8. <strong>Functions</strong> <a class="header-anchor" href="#✅-8-functions" aria-label="Permalink to &quot;✅ 8. **Functions**&quot;">​</a></h3><ul><li>Function declaration vs expression</li><li>Parameters and return values</li><li>Arrow functions (<code>=&gt;</code>)</li><li>Function scope and hoisting</li></ul><hr><h3 id="✅-9-arrays-and-array-methods" tabindex="-1">✅ 9. <strong>Arrays and Array Methods</strong> <a class="header-anchor" href="#✅-9-arrays-and-array-methods" aria-label="Permalink to &quot;✅ 9. **Arrays and Array Methods**&quot;">​</a></h3><ul><li>Creating arrays</li><li>Accessing elements</li><li>Common methods: <code>push()</code>, <code>pop()</code>, <code>shift()</code>, <code>unshift()</code>, <code>splice()</code>, <code>slice()</code>, <code>forEach()</code>, <code>map()</code></li></ul><hr><h3 id="✅-10-objects" tabindex="-1">✅ 10. <strong>Objects</strong> <a class="header-anchor" href="#✅-10-objects" aria-label="Permalink to &quot;✅ 10. **Objects**&quot;">​</a></h3><ul><li>Creating and accessing objects</li><li>Dot notation vs bracket notation</li><li>Object methods</li><li>Looping through objects (<code>for...in</code>)</li></ul><hr><h3 id="✅-11-type-conversion-and-coercion" tabindex="-1">✅ 11. <strong>Type Conversion and Coercion</strong> <a class="header-anchor" href="#✅-11-type-conversion-and-coercion" aria-label="Permalink to &quot;✅ 11. **Type Conversion and Coercion**&quot;">​</a></h3><ul><li>Implicit vs explicit conversion</li><li><code>parseInt()</code>, <code>parseFloat()</code>, <code>String()</code>, <code>Number()</code></li><li>Common pitfalls</li></ul><hr><h3 id="✅-12-error-handling-intro" tabindex="-1">✅ 12. <strong>Error Handling (Intro)</strong> <a class="header-anchor" href="#✅-12-error-handling-intro" aria-label="Permalink to &quot;✅ 12. **Error Handling (Intro)**&quot;">​</a></h3><ul><li>Common JavaScript errors</li><li><code>try</code>, <code>catch</code> (brief intro)</li></ul><hr><h3 id="✅-13-basic-dom-interaction-sneak-peek" tabindex="-1">✅ 13. <strong>Basic DOM Interaction (Sneak Peek)</strong> <a class="header-anchor" href="#✅-13-basic-dom-interaction-sneak-peek" aria-label="Permalink to &quot;✅ 13. **Basic DOM Interaction (Sneak Peek)**&quot;">​</a></h3><ul><li>What is the DOM?</li><li>Selecting elements (<code>getElementById</code>, <code>querySelector</code>)</li><li>Basic event handling (e.g., <code>onclick</code>)</li></ul><hr><h2 id="🧭-what-s-next" tabindex="-1">🧭 What&#39;s Next? <a class="header-anchor" href="#🧭-what-s-next" aria-label="Permalink to &quot;🧭 What&#39;s Next?&quot;">​</a></h2><p>Once learners master these foundational topics, they’ll be ready to move on to <strong>intermediate</strong> topics such as:</p><ul><li>Advanced functions and callbacks</li><li>ES6+ features (destructuring, spread/rest, classes, etc.)</li><li>Working with the DOM in depth</li><li>Events and event delegation</li><li>Asynchronous JavaScript (Promises, async/await)</li><li>Fetch API and JSON</li></ul>',48)])])}const b=o(r,[["render",n]]);export{p as __pageData,b as default};
