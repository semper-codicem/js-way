import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.9K5fzrVi.js";const c=JSON.parse('{"title":"Code Style Guide","description":"","frontmatter":{},"headers":[],"relativePath":"development/best-practices/code-style.md","filePath":"development/best-practices/code-style.md"}'),t={name:"development/best-practices/code-style.md"};function l(h,s,p,r,o,k){return e(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="code-style-guide" tabindex="-1">Code Style Guide <a class="header-anchor" href="#code-style-guide" aria-label="Permalink to &quot;Code Style Guide&quot;">​</a></h1><p>Consistent code style makes your code more readable and maintainable.</p><h2 id="general-principles" tabindex="-1">General Principles <a class="header-anchor" href="#general-principles" aria-label="Permalink to &quot;General Principles&quot;">​</a></h2><ul><li><strong>Consistency</strong>: Use the same style throughout your project</li><li><strong>Readability</strong>: Write code that others can easily understand</li><li><strong>Simplicity</strong>: Keep it simple and avoid unnecessary complexity</li></ul><h2 id="javascript-style-guidelines" tabindex="-1">JavaScript Style Guidelines <a class="header-anchor" href="#javascript-style-guidelines" aria-label="Permalink to &quot;JavaScript Style Guidelines&quot;">​</a></h2><h3 id="naming-conventions" tabindex="-1">Naming Conventions <a class="header-anchor" href="#naming-conventions" aria-label="Permalink to &quot;Naming Conventions&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use camelCase for variables and functions</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> userName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;john_doe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUserName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use PascalCase for classes and constructors</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use UPPER_SNAKE_CASE for constants</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> API_BASE_URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://api.example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="code-formatting" tabindex="-1">Code Formatting <a class="header-anchor" href="#code-formatting" aria-label="Permalink to &quot;Code Formatting&quot;">​</a></h3><ul><li>Use 2 spaces for indentation</li><li>Always use semicolons</li><li>Use single quotes for strings</li><li>Add trailing commas in objects and arrays</li></ul><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  apiUrl: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://api.example.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  timeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  retries: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="tools-for-enforcement" tabindex="-1">Tools for Enforcement <a class="header-anchor" href="#tools-for-enforcement" aria-label="Permalink to &quot;Tools for Enforcement&quot;">​</a></h2><ul><li><strong>Prettier</strong>: Automatic code formatting</li><li><strong>ESLint</strong>: Code linting and style checking</li><li><strong>EditorConfig</strong>: Consistent editor settings</li></ul>`,13)])])}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
